import os
os.environ["OPENCV_VIDEOIO_MSMF_ENABLE_HW_TRANSFORMS"] = "0"
import cv2
import subprocess
import tkinter as tk
import json
from PIL import Image, ImageTk
from tkinter import simpledialog, messagebox
from tkinter import ttk  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
import re  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏

DATASET_PATH = "dataset/"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–∞
def capture_face():
    scale_value = scale_var.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
    width, height = resolution_options[selected_resolution.get()]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
    output_resolution = (int(width * scale_value), int(height * scale_value))

    width_cam, height_cam = resol_cam_options[selected_resol_cam.get()] # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–µ–∏ –∫–∞–º–µ—Ä—ã


    cap = cv2.VideoCapture(0, cv2.CAP_MSMF)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width_cam)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height_cam)
    # cap.set(cv2.CAP_PROP_FPS, 30)

    if not cap.isOpened():
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã.")
            break

        frame_resized = cv2.resize(frame, output_resolution)
        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        original_frame = frame.copy()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ
        cv2.putText(frame, "Press 's' to save, 'q','esc' to cancel", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        cv2.imshow("Face capture", frame)

        key = cv2.waitKey(1) & 0xFF

        # –ù–∞–∂–∞—Ç—å 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã
        if key == ord('s'):
            # –û–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏
            def select_name():
                while True:
                    name = simpledialog.askstring("–ò–º—è", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏—Ü–∞:")

                    if not name:
                        return None

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–º—è —Å–æ—Å—Ç–æ—è–ª–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    if not re.match("^[A-Za-z]+$", name):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.")
                    else:
                        person_folder = os.path.join(DATASET_PATH, name)
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                        if not os.path.exists(person_folder):
                            create_folder = messagebox.askyesno("–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", f"–ü–∞–ø–∫–∏ {name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
                            if create_folder:
                                os.makedirs(person_folder)
                            else:
                                return None
                        return person_folder

            person_folder = select_name()
            if person_folder is None:
                break

            # –°–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_count = len([f for f in os.listdir(person_folder) if f.endswith(('.png', '.jpg', '.jpeg'))]) + 1
            image_path = os.path.join(person_folder, f"{image_count}.jpg")
            cv2.imwrite(image_path, original_frame)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")

            break

        elif key == ord('q') or key == 27:
            messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–°—ä–µ–º–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            break

    cap.release()
    cv2.destroyAllWindows()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
def update_database():
    subprocess.run(["python", "Train Face.py"], check=True)
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ë–∞–∑–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Face Recognition
def start_recognition():
    scale_value = scale_var.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
    width, height = resolution_options[selected_resolution.get()] # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
    width_cam, height_cam = resol_cam_options[selected_resol_cam.get()]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
    rec_t_value = sel_rec_t.get()
    hands_r_value = sel_hands_r.get()
    vector_r_value = sel_vector_r.get()
    subprocess.Popen(["python", "Main Recognition.py", str(scale_value), str(width), str(height), str(width_cam), str(height_cam),
                      str(rec_t_value), str(hands_r_value), str(vector_r_value)])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
def update_scale_label(value):
    scale_value_label.config(text=f"{float(value):.2f}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã
def define_work_zone():
    scale_value = scale_var.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
    width, height = resolution_options[selected_resolution.get()]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
    output_resolution = (int(width * scale_value), int(height * scale_value))
    width_cam, height_cam = resol_cam_options[selected_resol_cam.get()]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–µ–∏ –∫–∞–º–µ—Ä—ã

    cap = cv2.VideoCapture(0, cv2.CAP_MSMF)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, width_cam)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height_cam)
    # cap.set(cv2.CAP_PROP_FPS, 30)

    ret, frame = cap.read()
    cap.release()


    if not ret:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã.")
        return

    frame_resized = cv2.resize(frame, output_resolution)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
    snapshot_path = "workzone_snapshot.jpg"
    cv2.imwrite(snapshot_path, frame_resized)



    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Tkinter
    img = Image.open(snapshot_path)
    tk_img = ImageTk.PhotoImage(img)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω—ã
    zone_window = tk.Toplevel(root)
    zone_window.title("–û–±–æ–∑–Ω–∞—á—å—Ç–µ —Ä–∞–±–æ—á—É—é –∑–æ–Ω—É")

    canvas = tk.Canvas(zone_window, width=img.width, height=img.height)
    canvas.pack()

    canvas.create_image(0, 0, anchor="nw", image=tk_img)
    canvas.image = tk_img  # –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è–ª–æ—Å—å

    # –ù–∞—á–∞–ª—å–Ω—ã–µ 4 —Ç–æ—á–∫–∏ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ)
    h, w = img.height, img.width
    points = [
        [w // 3, h // 3],
        [2 * w // 3, h // 3],
        [2 * w // 3, 2 * h // 3],
        [w // 3, 2 * h // 3]
    ]
    point_circles = []
    polygon = None

    def draw_zone():
        nonlocal polygon
        if polygon:
            canvas.delete(polygon)
        polygon = canvas.create_polygon(*sum(points, []), outline="red", width=2, fill="", tags="zone")

        for c in point_circles:
            canvas.delete(c)
        point_circles.clear()

        for i, (x, y) in enumerate(points):
            circle = canvas.create_oval(x-5, y-5, x+5, y+5, fill="blue", tags=f"pt{i}")
            point_circles.append(circle)

    selected_point = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

    def on_press(event):
        item = canvas.find_withtag("current")
        tags = canvas.gettags(item)
        for tag in tags:
            if tag.startswith("pt"):
                selected_point[0] = int(tag[2:])  # –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏
                break

    def on_release(event):
        selected_point[0] = None  # –û—Ç–ø—É—Å—Ç–∏–ª–∏ ‚Äî —Å–±—Ä–æ—Å–∏–ª–∏ –≤—ã–±–æ—Ä

    def on_drag(event):
        idx = selected_point[0]
        if idx is not None:
            x = max(0, min(event.x, w))
            y = max(0, min(event.y, h))
            points[idx] = [x, y]
            draw_zone()

    canvas.bind("<Button-1>", on_press)
    canvas.bind("<ButtonRelease-1>", on_release)
    canvas.bind("<B1-Motion>", on_drag)

    draw_zone()

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    def save_zone():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ JSON
        zone_data = {
            "points": points,
            "scale": scale_var.get(),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
            "resolution": resolution_options[selected_resolution.get()],
            "resolution_cam": resol_cam_options[selected_resol_cam.get()]
        }
        with open("work_zone.json", "w") as f:
            json.dump(zone_data, f)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–†–∞–±–æ—á–∞—è –∑–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ work_zone.json")
        zone_window.destroy()

    btn_save = tk.Button(zone_window, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–æ–Ω—É", command=save_zone)
    btn_save.pack(pady=10)

    zone_window.bind("<Return>", lambda event: save_zone())  # ‚Üê –ü—Ä–∏–≤—è–∑–∫–∞ Enter

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
root = tk.Tk()
root.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Face & Body Recognition")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
root.geometry("400x600")

btn_capture = tk.Button(root, text="üì∏ –°–Ω—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Ü–æ", command=capture_face)
btn_capture.pack(pady=10)

btn_update = tk.Button(root, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", command=update_database)
btn_update.pack(pady=10)

# –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
scale_var = tk.DoubleVar(value=1.0)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
scale_label = tk.Label(root, text="–ú–∞—Å—à—Ç–∞–± –æ–∫–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")
scale_label.pack(pady=5)

scale_frame = tk.Frame(root)
scale_frame.pack(pady=5)

scale_slider = ttk.Scale(scale_frame, from_=0.5, to=2.0, orient="horizontal", variable=scale_var, command=update_scale_label)
scale_slider.pack(side="left", padx=5)

# –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
scale_value_label = tk.Label(scale_frame, text=f"{scale_var.get():.2f}")
scale_value_label.pack(side="left")

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –¥–ª—è –æ–∫–Ω–∞
resolution_label = tk.Label(root, text="–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–∫–Ω–∞:")
resolution_label.pack(pady=5)
resolution_options = {
    "2560 x 1440": (2560, 1440),
    "1920 x 1080": (1920, 1080),
    "1600 x 900": (1600, 900),
    "1280 x 720": (1280, 720),
    "800 x 600": (800, 600),
    "640 x 480": (640, 480)
}
selected_resolution = tk.StringVar(value="1920 x 1080")

resolution_combobox = ttk.Combobox(root, textvariable=selected_resolution, values=list(resolution_options.keys()), state="readonly")
resolution_combobox.pack(pady=5)

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –¥–ª—è –∫–∞–º–µ—Ä—ã
resol_cam_label = tk.Label(root, text="–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã:")
resol_cam_label.pack(pady=5)
resol_cam_options = {
    "2560 x 1440": (2560, 1440),
    "1920 x 1080": (1920, 1080),
    "1600 x 900": (1600, 900),
    "1280 x 720": (1280, 720),
    "800 x 600": (800, 600),
    "640 x 480": (640, 480)
}
selected_resol_cam = tk.StringVar(value="2560 x 1440")

resol_cam_combobox = ttk.Combobox(root, textvariable=selected_resol_cam, values=list(resol_cam_options.keys()), state="readonly")
resol_cam_combobox.pack(pady=5)

btn_start = tk.Button(root, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å Face & Body Recognition", command=start_recognition)
btn_start.pack(pady=10)

btn_zone = tk.Button(root, text="‚óº –û–±–æ–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—á—É—é –∑–æ–Ω—É", command=define_work_zone)
btn_zone.pack(pady=(10, 0))
note1 = tk.Label(root, text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–æ–Ω—É —Å —Ç–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–º–µ—Ä—ã, ")
note1.pack(pady=(0, 0))
note2 = tk.Label(root, text="—Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω)")
note2.pack(pady=(0, 5))

Dop = tk.Label(root, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
Dop.pack(pady=(0, 5))
Dop1 = tk.Label(root, text="–ü–æ—Ä–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è:")
Dop1.pack(pady=(0, 1))

sel_rec_t = tk.StringVar(value="0.6")
rec_t = tk.Entry(root, textvariable=sel_rec_t, width=6)
rec_t.pack(pady=5)

Dop2 = tk.Label(root, text="–†–∞–¥–∏—É—Å —Ä—É–∫ (–ø–æ—Ä–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è: –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —Ä—É–∫–∏):")
Dop2.pack(pady=(0, 1))

sel_hands_r = tk.StringVar(value="300")
hands_r = tk.Entry(root, textvariable=sel_hands_r, width=8)
hands_r.pack(pady=5)

Dop3 = tk.Label(root, text="–î–ª–∏–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–º–µ—Å—Ç–∏—Ç—å —Ç–æ—á–∫—É —Ä—É–∫–∏ –æ—Ç –ª–æ–∫—Ç—è):")
Dop3.pack(pady=(0, 1))

sel_vector_r = tk.StringVar(value="150")
vector_r = tk.Entry(root, textvariable=sel_vector_r, width=8)
vector_r.pack(pady=5)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ ESC
def on_escape(event=None):

    cv2.destroyAllWindows()
    root.quit()

root.bind("<Escape>", on_escape)

root.mainloop()

