import os
import cv2
import subprocess
import tkinter as tk
from tkinter import simpledialog, messagebox
from tkinter import ttk  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
import re  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏

DATASET_PATH = "dataset/"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–∞
def capture_face():
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã.")
            break

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ
        cv2.putText(frame, "Press 's' to save, 'q' to cancel", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        cv2.imshow("–ó–∞—Ö–≤–∞—Ç –ª–∏—Ü–∞", frame)

        key = cv2.waitKey(1) & 0xFF

        # –ù–∞–∂–∞—Ç—å 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ, 'q' –¥–ª—è –æ—Ç–º–µ–Ω—ã
        if key == ord('s'):
            # –û–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏
            def select_name():
                while True:
                    name = simpledialog.askstring("–ò–º—è", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏—Ü–∞:")

                    if not name:
                        return None

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–º—è —Å–æ—Å—Ç–æ—è–ª–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    if not re.match("^[A-Za-z]+$", name):
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.")
                    else:
                        person_folder = os.path.join(DATASET_PATH, name)
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                        if not os.path.exists(person_folder):
                            create_folder = messagebox.askyesno("–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", f"–ü–∞–ø–∫–∏ {name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å?")
                            if create_folder:
                                os.makedirs(person_folder)
                            else:
                                return None
                        return person_folder

            person_folder = select_name()
            if person_folder is None:
                break

            # –°–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_count = len([f for f in os.listdir(person_folder) if f.endswith(('.png', '.jpg', '.jpeg'))]) + 1
            image_path = os.path.join(person_folder, f"{image_count}.jpg")
            cv2.imwrite(image_path, frame)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")

            break

        elif key == ord('q'):
            messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–°—ä–µ–º–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            break

    cap.release()
    cv2.destroyAllWindows()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
def update_database():
    subprocess.run(["python", "Train Face.py"], check=True)
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ë–∞–∑–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Face Recognition
def start_recognition():
    scale_value = scale_var.get()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
    width = width_var.get()  # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É
    height = height_var.get()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É
    subprocess.Popen(["python", "Main Recognition.py", str(scale_value), str(width), str(height)])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
def update_scale_label(value):
    scale_value_label.config(text=f"{float(value):.2f}")


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
root = tk.Tk()
root.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Face & Body Recognition")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
root.geometry("400x400")

btn_capture = tk.Button(root, text="üì∏ –°–Ω—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Ü–æ", command=capture_face)
btn_capture.pack(pady=10)

btn_update = tk.Button(root, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", command=update_database)
btn_update.pack(pady=10)

# –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
scale_var = tk.DoubleVar(value=1.0)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
scale_label = tk.Label(root, text="–ú–∞—Å—à—Ç–∞–± –æ–∫–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")
scale_label.pack(pady=5)

scale_frame = tk.Frame(root)
scale_frame.pack(pady=5)

scale_slider = ttk.Scale(scale_frame, from_=0.5, to=2.0, orient="horizontal", variable=scale_var, command=update_scale_label)
scale_slider.pack(side="left", padx=5)

# –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
scale_value_label = tk.Label(scale_frame, text=f"{scale_var.get():.2f}")
scale_value_label.pack(side="left")

# –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã
resolution_label = tk.Label(root, text="–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1920 x 1080):")
resolution_label.pack(pady=5)

resolution_frame = tk.Frame(root)
resolution_frame.pack(pady=5)

width_var = tk.IntVar(value=1920)  # –ó–Ω–∞—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
height_var = tk.IntVar(value=1080)  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

width_entry = tk.Entry(resolution_frame, textvariable=width_var, width=10)
width_entry.pack(side="left", padx=5)

x_label = tk.Label(resolution_frame, text="x")
x_label.pack(side="left")

height_entry = tk.Entry(resolution_frame, textvariable=height_var, width=10)
height_entry.pack(side="left", padx=5)

btn_start = tk.Button(root, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å Face & Body Recognition", command=start_recognition)
btn_start.pack(pady=10)

root.mainloop()